#!/usr/bin/env zsh

# Set up the prompt

# autoload -Uz promptinit
# promptinit
# prompt adam1

# Keep 10000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
HISTDUP=erase
# zsh history options
setopt histignorealldups sharehistory appendhistory
setopt hist_ignore_all_dups hist_save_no_dups hist_ignore_dups hist_find_no_dups
setopt HIST_IGNORE_SPACE
# History search keybindings
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# if [ "$IS_FROM_CONTAINER" = 'true' ]; then
#   # Set language for some plugins
#   export LANG=en_US.UTF-8
#   export LC_ALL=en_US.UTF-8
# fi

# Must be sourced before compinit
# GENCOMPL_FPATH=$user_conf_path/zsh
# source "$user_config_cache/plugins/zsh-completion-generator/zsh-completion-generator.plugin.zsh"
# source "$user_config_cache/plugins/zsh-completion-generator/zsh-completion-generator.plugin.zsh"
# zstyle :plugin:zsh-completion-generator programs bat eza erd
# Optionally call: gencomp program [help command]

# For zshcompgen
export ZSHGENCOMP_SAVE_LOCATION="$user_conf_path/completions/zsh"

# fpath changes must happen before compinit
fpath=(
  ~/.zsh
  # "$user_conf_path/zsh"
  "$user_config_cache/completions/zsh"
  "$user_config_cache/plugins"
  "$user_config_cache/plugins/zsh-completions/src"
  "${fpath[@]}"
)


function zcompile-many() {
  local f
  for f; do zcompile -R -- "$f".zwc "$f"; done
}

# Use modern completion system
autoload -Uz compinit && compinit

# Add bash completion for pipx
autoload -U bashcompinit && bashcompinit

# Compile zcomdump if wordcount changed
[[ ~/.zcompdump.zwc -nt ~/.zcompdump ]] || zcompile-many ~/.zcompdump
unfunction zcompile-many

# Auto completion configs
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
# eval "$(dircolors -b 2>/dev/null || gdircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Auto scape urls when pasting on them on terminal
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

setopt interactive_comments

# Keybinding for delete key
bindkey "^[[3~" delete-char

# Keybindings for ctrl-[left|right]
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# Mac keys
if [ "$IS_MAC" = true ]; then
  terminal_type="$([ -z "$TERM_PROGRAM" ] && echo "$TERM" || echo "$TERM_PROGRAM")"
  case "$terminal_type" in
    *kitty|WezTerm*)
      # kitty (alt-[left|right])
      bindkey "\e[1;3D" backward-word # ⌥←
      bindkey "\e[1;3C" forward-word # ⌥→
      ;;
    iTerm*)
      # iTerm2 (alt-[left|right])
      bindkey "\e\e[C" forward-word
      bindkey "\e\e[D" backward-word
      ;;
  esac
fi

if [ "$IS_GITBASH" = true ]; then
  # complete hard drives in msys2
  # Ref: https://github.com/msys2/MSYS2-packages/issues/38
  drives=$(mount | sed -rn 's#^[A-Z]: on /([a-z]).*#\1#p' | tr '\n' ' ')
  zstyle ':completion:*' fake-files /: "/:$drives"
  unset drives
fi

# Break word chars
export WORDCHARS="${WORDCHARS//[-_;\~\.\/\\]}"

if [ -f "$user_config_cache/plugins/zsh-nvm/zsh-nvm.plugin.zsh" ]; then
  export NVM_DIR="$HOME/.nvm"
  export NVM_LAZY_LOAD=true
  export NVM_COMPLETION=true
  export NVM_CACHE_LOAD=true
  export NVM_CACHE_PATH="$HOME/.cache/.zsh_nvm_cache"
  source "$user_config_cache/plugins/zsh-nvm/zsh-nvm.plugin.zsh"
fi

# run after cd
# chpwd () {
#   ls -a | head -n 5
# }

# Fix cursor when exiting vim
_fix_cursor() {
   echo -ne '\e[5 q'
}
precmd_functions+=(_fix_cursor)

if [ "$IS_MAC" = true ]; then
  # Fix alt-c keybinding in macos
  bindkey "ç" fzf-cd-widget
  # Alt+o to launch quick project cd
  # bindkey -s "ø" 'cprj\n'
fi

__emoji__ () {
  # Call emoji and append content after cursor
  LBUFFER="${LBUFFER}$(emoji | tr -d '\n')"
  zle reset-prompt
}

zle -N __emoji__
bindkey -M emacs '^o^i' __emoji__
bindkey -M vicmd '^o^i' __emoji__
bindkey -M viins '^o^i' __emoji__

__cprj__ () {
  # Store current typed content
  local current="$BUFFER"
  BUFFER=""
  # Clean prompt
  zle reset-prompt
  # call cproj
  cprj
  # Release prompt
  zle accept-line
  # Restore content of line
  # Ref: https://gist.github.com/YumaInaura/a9fce6dbc9949f7cb1fd9efba0d42d0e
  print -z "$current"
}

# Alt+o to launch quick project cd
# bindkey -s '^[o' 'cprj\n'

autoload -U __cprj__
zle -N __cprj__
bindkey -M emacs '^op' __cprj__
bindkey -M vicmd '^op' __cprj__
bindkey -M viins '^op' __cprj__

# Edit current command in editor
# Ref: https://gist.github.com/raven-rock/4fc8152f91eedf663755b65432f48ce5
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^oe' edit-command-line
# Add bash bindkey as well
bindkey '^x^e' edit-command-line

# Add ctrl+o keybinding for lfcd
# Add alternative for nix store
if command -v lf &> /dev/null || command -v ~/.nix-profile/bin/lf &> /dev/null; then
  __lfcd__ () {
    lfcd
    # Release prompt
    zle accept-line
    zle reset-prompt
  }
  autoload -U __lfcd__
  zle -N __lfcd__
  bindkey '^o^l' __lfcd__

  # bindkey -s '^o' 'lfcd\n'
fi

# Load fzf support
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
fi

# Add fzf tab completions
if [ -f "$user_config_cache/plugins/fzf-tab-completion/zsh/fzf-zsh-completion.sh" ]; then
  # --preview '$user_conf_path/utils/fzf-preview.sh {}'
  # --preview-window 'right:5:hidden:wrap'
  # --bind 'ctrl-/:change-preview-window\(down|hidden|\)'

  FZF_COMP_OPTS=(
    --tiebreak=chunk
    --cycle
    --bind 'alt-a:select-all'
    --bind 'alt-d:deselect-all'
    --bind 'alt-f:first'
    --bind 'alt-l:last'
    --bind 'alt-c:clear-query'
    --bind 'alt-up:preview-page-up'
    --bind 'alt-down:preview-page-down'
    --bind 'ctrl-s:toggle-sort'
    --bind "'ctrl-/:change-preview-window(down|hidden|)'"
  )

  export FZF_COMPLETION_OPTS="${FZF_COMP_OPTS[@]}"

  # Load fzf tab completion
  \. "$user_config_cache/plugins/fzf-tab-completion/zsh/fzf-zsh-completion.sh"

  # Search display strings
  # only for git
  zstyle ':completion:*:*:git:*' fzf-search-display true
  # or for everything
  # zstyle ':completion:*' fzf-search-display true

  # press ctrl-r to repeat completion *without* accepting i.e. reload the completion
  # press right to accept the completion and retrigger it
  # press alt-enter to accept the completion and run it
  __fzf_tab_keys=(
      ctrl-r:'repeat-fzf-completion'
      right:accept:'repeat-fzf-completion'
      alt-enter:accept:'zle accept-line'
  )

  # preview a `git status` when completing git add
  zstyle ':completion::*:git::git,add,*' fzf-completion-opts --preview='git -c color.status=always status --short'
  # if other subcommand to git is given, show a git diff or git log
  zstyle ':completion::*:git::*,[a-z]*' fzf-completion-opts --preview='
  eval set -- {+1}
  for arg in "$@"; do
      { git diff --color=always -- "$arg" | git log --color=always "$arg" } 2>/dev/null
  done'

  # basic file preview for ls (you can replace with something more sophisticated than head)
  zstyle ':completion::*:(ls|eza|cd|rm|ln|fd|rg|mv|cp|cat|bat|erd)::*' \
    fzf-completion-opts --preview='eval $user_conf_path/utils/fzf-preview.sh {1}'
  # preview when completing env vars (note: only works for exported variables)
  # eval twice, first to unescape the string, second to expand the $variable
  zstyle ':completion::*:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' \
    fzf-completion-opts --preview='eval eval echo {1}'
  zstyle ':completion:*' fzf-completion-keybindings "${__fzf_tab_keys[@]}"
  # also accept and retrigger completion when pressing / when completing cd
  zstyle ':completion::*:(cd|cat|bash|cp|rm|mv|ls|ln|bat|eza|fd|rg|erd):*' fzf-completion-keybindings "${__fzf_tab_keys[@]}" /:accept:'repeat-fzf-completion'
  unset __fzf_tab_keys
  unset FZF_COMP_OPTS
fi

# F*ck base 1 index. All my homies use base 0 index for arrays
# It breaks zsh-autosuggestions e.e
# Will have base 1 index for now ... 😓
# setopt KSH_ARRAYS

# Add auto suggestions
# auto suggestions (Could be plugin of oh-my-zsh  but using oh-my-posh at the moment)
if [ -f "$user_config_cache/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
  source "$user_config_cache/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
  export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#b3e5ff"
fi

# Must be the last line of this file
if [ -f "$user_config_cache/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh" ]; then
  # fast-theme -t <THEME> # to test a theme
  # fast-theme -l         # to list available themes
  source "$user_config_cache/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"
elif [ -f "$user_config_cache/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
  source "$user_config_cache/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

