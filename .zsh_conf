#!/usr/bin/env zsh

# Set up the prompt

# autoload -Uz promptinit
# promptinit
# prompt adam1

setopt histignorealldups sharehistory
setopt HIST_IGNORE_SPACE

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

# Add bash completion for pipx
autoload -U bashcompinit
bashcompinit

# Auto completion configs
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b 2>/dev/null || gdircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# Auto scape urls when pasting on them on terminal
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

setopt interactive_comments

# Keybinding for delete key
bindkey "^[[3~" delete-char

# Keybindings for ctrl-[left|right]
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# Mac keys
if [ "$IS_MAC" = true ]; then
  terminal_type="$([ -z "$TERM_PROGRAM" ] && echo "$TERM" || echo "$TERM_PROGRAM")"
  case "$terminal_type" in
    *kitty)
      # kitty (alt-[left|right])
      bindkey "\e[1;3D" backward-word # ⌥←
      bindkey "\e[1;3C" forward-word # ⌥→
      ;;
    iTerm*)
      # iTerm2 (alt-[left|right])
      bindkey "\e\e[C" forward-word
      bindkey "\e\e[D" backward-word
      ;;
  esac
fi

# Break word chars
export WORDCHARS="${WORDCHARS//[-_;\~\.\/\\]}"

# Add auto suggestions
# auto suggestions (Could be plugin of oh-my-zsh  but using oh-my-posh at the moment)
test -f ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh && source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh


if [ -f ~/.zsh/zsh-nvm/zsh-nvm.plugin.zsh ]; then
  export NVM_DIR="$HOME/.nvm"
  export NVM_LAZY_LOAD=true
  export NVM_COMPLETION=true
  export NVM_CACHE_LOAD=true
  export NVM_CACHE_PATH="$HOME/.cache/.zsh_nvm_cache"
  source ~/.zsh/zsh-nvm/zsh-nvm.plugin.zsh
fi

# Load fzf support
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
fi


# run after cd
# chpwd () {
#   ls -a | head -n 5
# }

# Fix cursor when exiting vim
_fix_cursor() {
   echo -ne '\e[5 q'
}
precmd_functions+=(_fix_cursor)

if [ "$IS_MAC" = true ]; then
  # Fix alt-c keybinding in macos
  bindkey "ç" fzf-cd-widget
fi

# Add ctrl+o keybinding for lfcd
# Add alternative for nix store
if command -v lf &> /dev/null || command -v ~/.nix-profile/bin/lf &> /dev/null; then
  bindkey -s '^o' 'lfcd\n'
fi

# Must be the last line of this file
if [ -f "$HOME/.zsh/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh" ]; then
  source "$HOME/.zsh/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"
elif [ -f "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
  source "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

