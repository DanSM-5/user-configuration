#!/usr/bin/env bash

######################################
#        GENERAL CONFIGURATION       #
######################################

# Follow structure conf folders and files
user_conf_path="$HOME/.usr_conf"
user_scripts_path="$HOME/user-scripts"
prj="$HOME/prj"

detect_shell () {
  if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
    export IS_ZSH=true
    export IS_BAHS=false
    export SHELL_NAME=zsh

    test -f "$user_conf_path/.zsh_conf" && source "$user_conf_path/.zsh_conf"
  elif [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
    export IS_ZSH=false
    export IS_BAHS=true
    export SHELL_NAME=bash
    test -f "$user_conf_path/.bash_conf" && source "$user_conf_path/.bash_conf"
  else
    echo "[WARNING]: NO SHELL DETECTED!"
    export IS_ZSH=false
    export IS_BAHS=false
    export SHELL_NAME=unknown
  fi
}

set_linux () {
  if command -v "/home/linuxbrew/.linuxbrew/bin/brew" &> /dev/null; then
    # Linux brew
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

    # oh-my-posh requires brew
    if command -v oh-my-posh &> /dev/null && test -f ~/omp-theme/jandedobbeleer.omp.json; then
      eval "$(oh-my-posh --init --shell $SHELL_NAME --config ~/omp-theme/jandedobbeleer.omp.json)"
    fi

    local brew_nvm=$(brew --prefix nvm)
  fi

  # NVM configuration
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  [ -s "$brew_nvm/etc/bash_completion.d/nvm" ] && \. "$brew_nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion from brew

  # Detect if running on WSL
  # if command -v uname.exe &> /dev/null && [[ "$(uname.exe)" =~ "MSYS" ]]; then
  #   set_wsl
  # fi
}

set_wsl () {
  echo no implemented &> /dev/null
}

set_mac () {
  export BASH_SILENCE_DEPRECATION_WARNING=1
  if command -v brew &> /dev/null; then
    # NVM configuration
    export NVM_DIR="$HOME/.nvm"
    local nvm_path=$(brew --prefix nvm)
    [ -s $nvm_path/nvm.sh ] && source $nvm_path/nvm.sh
    [ -s $nvm_path/etc/bash_completion.d/nvm ] && source $nvm_path/etc/bash_completion.d/nvm
  fi

  if [ -d "$(brew --prefix coreutils)" ]; then
    test -r ~/.dircolors && eval "$(gdircolors -b ~/.dircolors)" || eval "$(gdircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
  fi
}

set_general () {
  # enable color support of ls and also add handy aliases
  if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
  fi

  # set PATH so it includes user's provate bin if it exists
  # if [ -d "$HOME/bin" ]; then
  export PATH="$HOME/bin:$PATH"
  # fi

  # set PATH so it includes user's provate bin if it exists
  # if [ -d "$HOME/.local/bin" ]; then
  export PATH="$HOME/.local/bin:$PATH"
  # fi

  if command -v register-python-argcomplete &> /dev/null; then
    eval "$(register-python-argcomplete pipx)"
  fi

  if command -v starship &> /dev/null; then
    eval "$(starship init $SHELL_NAME)"
  fi

  # For envman. Do not edit.
  [ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

  # To install useful key bindings and fuzzy completion:
  # $(brew --prefix)/opt/fzf/install # call only once
  case $SHELL_NAME in
    zsh)  test -f ~/.fzf.zsh && source ~/.fzf.zsh;;
    bash) test -f ~/.fzf.bash && source ~/.fzf.bash;;
  esac
}

# initialize shell
detect_shell

# Should be called system agnostic
set_general

# Set device specific
case "$(uname)" in
  Linux*) set_linux;;
  Darwin*) set_mac;;
esac

