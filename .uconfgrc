#!/usr/bin/env bash

######################################
#        GENERAL CONFIGURATION       #
######################################

# Follow structure conf folders and files
export user_conf_path="${user_conf_path:-"$HOME/.usr_conf"}"
export user_scripts_path="${user_scripts_path:-"$HOME/user-scripts"}"
export prj="${prj:-"$HOME/prj"}"
export user_config_cache="${user_config_cache:-"$HOME/.cache/.user_config_cache"}"

backup_path () {
  export PATH_BACKUP=$(echo -n $PATH | tr ":" "\n")
}

# Separate path entries that start with /mnt/
set_windows_path () {
  export WIN_PATH=$(echo -n $PATH_BACKUP | rg "/mnt/" | sed ':a; N; $!ba; s/\n/:/g')
}

set_unix_path () {
  export UNIX_PATH=$(echo -n $PATH_BACKUP | rg "/mnt/" --invert-match | sed ':a; N; $!ba; s/\n/:/g')
}

set_path () {
  export PATH="$1"
}

path_append ()  { path_remove $1; export PATH="$PATH:$1"; }
path_prepend () { path_remove $1; export PATH="$1:$PATH"; }
path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }

detect_shell () {
  # echo "Loading..."
  # echo "Running from shell: $SHELL"

  if [ -n "$ZSH_VERSION" ]; then
    export IS_ZSH=true
    export IS_BASH=false
    export SHELL_NAME=zsh
    # test -f "$user_conf_path/.zsh_conf" && source "$user_conf_path/.zsh_conf"
    source "$user_conf_path/.zsh_conf"

  elif [ -n "$BASH_VERSION" ]; then
    export IS_ZSH=false
    export IS_BASH=true
    export SHELL_NAME=bash
    # test -f "$user_conf_path/.bash_conf" && source "$user_conf_path/.bash_conf"
    source "$user_conf_path/.bash_conf"

  else
    echo "[WARNING]: NO VALID CONFIGURATION DETECTED!"
    export IS_ZSH=false
    export IS_BAHS=false
    export SHELL_NAME=unknown

  fi
}

set_linux () {
  # Empty as it is expected the next path section to add its own path separator
  export WIN_ROOT=""
  export WUSER="$USER"
  export USERNAME="$USER"
  export WIN_HOME="$HOME"
  export APPDATA="$HOME/.config"
  export LOCALAPPDATA="$HOME/.config"
  export USERPROFILE="$HOME"
  export TEMP=/tmp

  if command_exists "/home/linuxbrew/.linuxbrew/bin/brew"; then
    # Linux brew
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

    local brew_nvm=$(brew --prefix nvm)
  fi

  # NVM configuration (Bash only)
  if [ "$IS_BASH" = "true" ]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    [ -s "$brew_nvm/etc/bash_completion.d/nvm" ] && \. "$brew_nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion from brew
  fi

  # Setup wsl specifics
  if [ "$IS_WSL" = true ]; then
    set_wsl
  fi
}

set_wsl () {
  # Windows file system
  export WIN_ROOT="/mnt/c"
  export WUSER="$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | sed -E 's/[[:space:]]*$//')"
  export USERNAME="$WUSER"
  export WIN_HOME="$WIN_ROOT/Users/$WUSER"
  export APPDATA="$WIN_HOME/AppData/Roaming"
  export LOCALAPPDATA="$WIN_HOME/AppData/Local"
  export USERPROFILE="$HOME"
  export TEMP=/tmp
}

set_gitbash () {
  # Load fzf-git
  [ -f "$HOME/.usr_conf/utils/fzf-git.sh" ] && source "$HOME/.usr_conf/utils/fzf-git.sh"

  export MSYS="$MSYS winsymlinks:nativestrict"

  # Load fzf helpers
  # [ -f "$HOME/.fzf.bash" ] && source "$HOME/.fzf.bash"

  # Windows file system
  export WIN_ROOT="/c"
  export WUSER="$USERNAME"
  export WIN_HOME="$HOME"
}

set_termux () {
  export WIN_ROOT="${PREFIX%/usr}"
  export USER="termux"
  export WUSER="$USER"
  export USERNAME="$USER"
  export WIN_HOME="$HOME"
  export APPDATA="$HOME/.config"
  export LOCALAPPDATA="$HOME/.config"
  export USERPROFILE="$HOME"
  export TEMP="$HOME/tmp"
}

set_mac () {
  # Empty as it is expected the next path section to add its own path separator
  export WIN_ROOT=""
  export WUSER="$USER"
  export USERNAME="$USER"
  export WIN_HOME="$HOME"
  export APPDATA="$HOME/.config"
  export LOCALAPPDATA="$HOME/.config"
  export USERPROFILE="$HOME"
  export TEMP=/tmp

  # Silence mac log
  export BASH_SILENCE_DEPRECATION_WARNING=1

  if command_exists brew; then
    # NVM configuration
    export NVM_DIR="$HOME/.nvm"
    local nvm_path=$(brew --prefix nvm)
    [ -s $nvm_path/nvm.sh ] && source $nvm_path/nvm.sh
    [ -s $nvm_path/etc/bash_completion.d/nvm ] && source $nvm_path/etc/bash_completion.d/nvm
    export PATH="/usr/local/sbin:$PATH"
  fi

  # Set color output
  if [ -d "$(brew --prefix coreutils)" ]; then
    # test -r ~/.dircolors && eval "$(gdircolors -b ~/.dircolors)" || eval "$(gdircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
  fi
}



set_general () {
  # Experimental
  # export PAGER='bat -p --paging=always'
  export COLORTERM='truecolor'
  export TERM="${TERM:-xterm-256color}"
  export BAT_THEME='OneHalfDark'

  # LS_COLORS string generated with vivid
  export LS_COLORS="$(cat "$user_conf_path/.ls_colors")"
  # Set colors
  # export LS_COLORS='rs=0:di=01;93:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=04;35;47:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'

  # Add nix to environment
  if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
  fi # added by Nix installer

  # Add home manager if available
  if [ -f "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" ]; then
    source "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"
  fi


  # enable color support of ls and also add handy aliases
  if [ -x /usr/bin/dircolors ]; then
    # test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
  fi

  # colored GCC warnings and errors
  #export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

  # make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  if [ -d "$HOME/.bun" ]; then
    # bun completions
    [ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

    # bun
    export BUN_INSTALL="$HOME/.bun"
    export PATH="$BUN_INSTALL/bin:$PATH"
  fi

  # Cargo for rust applications
  if command_exists cargo; then
    export PATH="$HOME/.cargo/bin:$PATH"
  fi

  # To install useful key bindings and fuzzy completion:
  # $(brew --prefix)/opt/fzf/install # call only once
  # case $SHELL_NAME in
  #   zsh)  test -f ~/.fzf.zsh && source ~/.fzf.zsh;;
  #   bash) test -f ~/.fzf.bash && source ~/.fzf.bash;;
  # esac
}

set_general_after () {
  if command_exists delta; then
    export __git_pager__=delta
  fi

  if [ -f "$HOME/.fzf.$SHELL_NAME" ]; then
    source "$HOME/.usr_conf/utils/fzf-git.sh"
  fi

  if command_exists starship; then
    if [ "$IS_TERMUX" = true ] || [ "$IS_NIXONDROID" = true ]; then
      eval "$(starship init $SHELL_NAME)"
    fi
  fi

  # oh-my-posh requires brew
  if command_exists oh-my-posh && test -f ~/omp-theme/jandedobbeleer.omp.v2.json; then
    eval "$(oh-my-posh --init --shell $SHELL_NAME --config ~/omp-theme/jandedobbeleer.omp.v2.json)"
  fi

  export PREFERRED_EDITOR='vim'
  if command_exists nvim; then
    export PREFERRED_EDITOR='nvim'
  fi

  export EDITOR="$PREFERRED_EDITOR"
  export VISUAL="$PREFERRED_EDITOR"

  # For nix package manager
  if command_exists nix-env; then
    alias nxl="nix-env -q"     # List
    alias nxi="nix-env -iA"    # Install
    alias nxr="nix-env -e"     # Remove
    alias nxu="nix-env -u"     # Update

    nxs () {
      # This can use regular expressions. E.g.
      # nix-env --query --available --attr-path ".*$@.*"
      nix-env --query --available --attr-path "$@"
    }

    # Search using nix-locate
    nxsp () {
      nix-shell -p nix-index --run "nix-locate --at-root /bin/$1"
    }
  fi

  # Envman can duplicate $HOME/.local/bin in PATH
  # For envman. Do not edit.
  [ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

  # Flags to apply to fd commands
  export FD_SHOW_OPTIONS=(
    --follow
    --hidden
    --no-ignore
  )

  # Fixes to exclude from being find
  export FD_EXCLUDE_OPTIONS=(
    --exclude AppData
    --exclude Android
    --exclude node_modules
    --exclude plugged
    --exclude tizen-studio
    --exclude Library
    --exclude scoop
    --exclude vimfiles
    --exclude aws
    --exclude nvim
    --exclude .vscode-server
    --exclude .vscode-server-server
    --exclude .git
    --exclude .gitbook
    --exclude .gradle
    --exclude .nix-defexpr
    --exclude .azure
    --exclude .SpaceVim
    --exclude .cache
    --exclude .jenv
    --exclude .node-gyp
    --exclude .npm
    --exclude .nvm
    --exclude .colima
    --exclude .pyenv
    --exclude .DS_Store
    --exclude .vscode
    --exclude .vim
    --exclude .bun
    --exclude .nuget
    --exclude .dotnet
    --exclude .pnpm-store
    --exclude "'.pnpm*'"
    --exclude "'.zsh_history.*'"
    --exclude .android
    --exclude .sony
    --exclude .chocolatey
    --exclude .gem
    --exclude .jdks
    --exclude .nix-profile
    --exclude .sdkman
    --exclude __pycache__
    --exclude "'.local/pipx/*'"
    --exclude "'.local/share/*'"
    --exclude "'.local/state/*'"
    --exclude "'.local/lib/*'"
    --exclude cache
    --exclude browser-data
    --exclude go
    --exclude nodejs
    --exclude podman
    --exclude "'PlayOnLinux*'"
    --exclude .PlayOnLinux
  )

  if command_exists fzf; then
    if [ "$IS_GITBASH" = true ]; then
      # Replace all backslash '\' into forward slash '/'
      SHOME="${USERPROFILE//\\//}"
    else
      SHOME="$HOME"
    fi

    [ ! -d "$SHOME/.cache/fzf-history" ] && mkdir -p "$SHOME/.cache/fzf-history"

    FZF_DEFAULT_OPTS="
      --history=$SHOME/.cache/fzf-history/fzf-history-default
      --height 80%
      --layout=reverse
      --border
    "'
      --color=dark
      --color=fg:-1,bg:-1,hl:#c678dd,fg+:#ffffff,bg+:#4b5263,hl+:#d858fe
      --color=info:#98c379,prompt:#61afef,pointer:#be5046,marker:#e5c07b,spinner:#61afef,header:#61afef
    '

    export FZF_DEFAULT_OPTS

    # dark='--color=bg+:#3F3F3F,bg:#4B4B4B,border:#6B6B6B,spinner:#98BC99,hl:#719872,fg:#D9D9D9,header:#719872,info:#BDBB72,pointer:#E12672,marker:#E17899,fg+:#D9D9D9,preview-bg:#3F3F3F,prompt:#98BEDE,hl+:#98BC99'
    # light='--color=bg+:#D9D9D9,bg:#E1E1E1,border:#C8C8C8,spinner:#719899,hl:#719872,fg:#616161,header:#719872,info:#727100,pointer:#E12672,marker:#E17899,fg+:#616161,preview-bg:#D9D9D9,prompt:#0099BD,hl+:#719899'
    # local gruvbox='--color="bg+:#3c3836,bg:#32302f,spinner:#fb4934,hl:#928374,fg:#ebdbb2,header:#928374,info:#8ec07c,pointer:#fb4934,marker:#fb4934,fg+:#ebdbb2,prompt:#fb4934,hl+:#fb4934"'
    # nord_vim='--color=bg+:#3B4252,bg:#2E3440,spinner:#81A1C1,hl:#616E88,fg:#D8DEE9,header:#616E88,info:#81A1C1,pointer:#81A1C1,marker:#81A1C1,fg+:#D8DEE9,prompt:#81A1C1,hl+:#81A1C1'
    # molokai='--color=bg+:#293739,bg:#1B1D1E,border:#808080,spinner:#E6DB74,hl:#7E8E91,fg:#F8F8F2,header:#7E8E91,info:#A6E22E,pointer:#A6E22E,marker:#F92672,fg+:#F8F8F2,prompt:#F92672,hl+:#F92672'


    # CTRL-/ to toggle small preview window to see the full command
    # CTRL-Y to copy the command into clipboard using pbcopy
    export FZF_CTRL_R_OPTS="
      --history=$SHOME/.cache/fzf-history/fzf-history-ctrlr
      --preview 'bat --color=always -pp --language bash <<< {2..}' --preview-window up:3:hidden:wrap
      --bind 'alt-a:select-all'
      --bind 'alt-d:deselect-all'
      --bind 'alt-f:first'
      --bind 'alt-l:last'
      --bind 'alt-c:clear-query'
      --bind 'ctrl-/:toggle-preview'
      --bind 'ctrl-s:toggle-sort'
      --bind 'ctrl-y:execute-silent(echo -n {2..} | \$clipboard_copy)+abort'
      --color header:italic
      --prompt 'History> '
      --header 'ctrl-y: Copy'"

    # Print tree structure in the preview window
    export FZF_ALT_C_OPTS="
      --history=$SHOME/.cache/fzf-history/fzf-history-altc
      --prompt 'CD> '
      --color header:italic
      --ansi
      --preview-window '60%'
      --preview '$user_conf_path/utils/fzf-preview.sh {}'
      --bind 'alt-a:select-all'
      --bind 'alt-d:deselect-all'
      --bind 'alt-f:first'
      --bind 'alt-l:last'
      --bind 'alt-c:clear-query'
      --bind 'ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down,ctrl-s:toggle-sort'"

    export FZF_CTRL_T_OPTS="
      --history=$SHOME/.cache/fzf-history/fzf-history-ctrlt
      --multi
      --ansi --cycle
      --header 'ctrl-a: All | ctrl-d: Dirs | ctrl-f: Files | ctrl-y: Copy | ctrl-t: CWD | ctrl-o: Open'
      --prompt 'All> '
      --color header:italic
      --bind \"ctrl-a:change-prompt(All> )+reload(fd ${FD_SHOW_OPTIONS[*]} ${FD_EXCLUDE_OPTIONS[*]} --color=always)\"
      --bind \"ctrl-f:change-prompt(Files> )+reload(fd ${FD_SHOW_OPTIONS[*]} ${FD_EXCLUDE_OPTIONS[*]} --color=always --type file)\"
      --bind \"ctrl-d:change-prompt(Dirs> )+reload(fd ${FD_SHOW_OPTIONS[*]} ${FD_EXCLUDE_OPTIONS[*]} --color=always --type directory)\"
      --bind 'ctrl-t:change-prompt(CWD> )+reload(eza --color=always --all --dereference --no-quotes --group-directories-first \$PWD)'
      --bind 'ctrl-y:execute-silent(\"\$user_conf_path/utils/copy-helper\" \"{+f}\")+abort'
      --bind 'ctrl-o:execute-silent($user_scripts_path/bin/start {})+abort'
      --bind 'alt-a:select-all'
      --bind 'alt-d:deselect-all'
      --bind 'alt-f:first'
      --bind 'alt-l:last'
      --bind 'alt-c:clear-query'
      --preview-window '60%'
      --preview '$user_conf_path/utils/fzf-preview.sh {}'
      --bind 'ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down,ctrl-s:toggle-sort'"

    unset SHOME
  fi

  # fzf support
  if command_exists rg; then
    export FZF_DEFAULT_COMMAND='rg --files --follow --no-ignore --hidden --glob "!plugged" --glob "!node_modules" --glob "!.git"'
  fi

  if command_exists fd; then
    export FZF_CTRL_T_COMMAND="fd --color=always ${FD_SHOW_OPTIONS[@]} ${FD_EXCLUDE_OPTIONS[@]}"
    export FZF_ALT_C_COMMAND="fd --color=always --type directory ${FD_SHOW_OPTIONS[@]} ${FD_EXCLUDE_OPTIONS[@]}"

    # Use fd (https://github.com/sharkdp/fd) instead of the default find
    # command for listing path candidates.
    _fzf_compgen_path () {
      fd --hidden --follow --exclude "node_modules" --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir () {
      fd --type d --hidden --follow --exclude "node_modules" --exclude ".git" . "$1"
    }
  fi

  if command_exists rga; then
    rga-fzf () {
      RG_PREFIX="rga --files-with-matches"
      local file
      file="$(
      FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
        fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
        --phony -q "$1" \
        --bind "change:reload:$RG_PREFIX {q}" \
        --preview-window="70%:wrap"
      )" &&
      echo "opening $file" &&
      xdg-open "$file"
    }
  fi

  if command_exists bat; then

    if [ "$IS_TERMUX" = true ]; then
      export MANPAGER="$HOME/.local/bin/manpager-helper"
      # Fix formatting problem for MANPAGER and bat
      export MANROFFOPT="-c"
    else
      # TODO: Investigate manpager-helper not working on WSL
      export MANPAGER="sh -c 'col -bx | bat -l man -p'"
      # Fix formatting problem for MANPAGER and bat
      export MANROFFOPT="-c"
    fi

  fi

  # User scripts bin should be the bottom of the path as a safer location to add binaries or scripts
  if [ -d "$user_scripts_path/bin" ] && ! command -v 'path_end' &> /dev/null; then
    PATH="$PATH:$user_scripts_path/bin"
  fi

  # Make user bin locations the top of the path
  # ~/.local/bin can be used by other programs like pipx
  # ~/bin should be used exclusively by the user

  # set PATH so it includes user's provate bin if it exists
  # if [ -d "$HOME/.local/bin" ]; then
  PATH="$HOME/.local/bin:$PATH"
  # fi

  # set PATH so it includes user's provate bin if it exists
  # if [ -d "$HOME/bin" ]; then
  PATH="$HOME/bin:$PATH"
  # fi

  export PATH

  # Depends on path to be configured properly
  if command_exists register-python-argcomplete; then
    eval "$(register-python-argcomplete pipx | tr -d '\r')"
  fi
}

# initialize shell
detect_shell

# Should be called system agnostic
set_general

# Set device specific
case "$(uname)" in
  Linux*) set_linux;;
  Darwin*) set_mac;;
  *NT*) set_gitbash;;
esac

set_general_after

