#!/usr/bin/env bash

######################################
#           GENERAL ALIAS            #
######################################

# Follow structure conf folders and files
export user_conf_path="$HOME/.usr_conf"
export user_scripts_path="$HOME/user-scripts"
export prj="$HOME/prj"

alias gpr="cd $prj"
alias gus="cd $user_scripts_path"
alias guc="cd $HOME/.usr_conf"
alias gvc="cd $HOME/.SpaceVim.d"
alias goh="cd $HOME"

export uprf="$HOME/.profile"
uconf="$user_conf_path/.uconfrc"
uconfg="$user_conf_path/.uconfgrc"
ualias="$user_conf_path/.ualiasrc"
ualiasg="$user_conf_path/.ualiasgrc"

fzf-defaults () {
  fzf --height 50% --min-height 20 --border \
    --bind ctrl-/:toggle-preview \
    --header 'Press CTRL-/ to toggle preview' \
    "$@"
}

fd-defaults () {
  fd --exclude ".git" --exclude "node_modules" \
    --hidden \
    "$@"
}

PREFERED_EDITOR="${PREFERED_EDITOR:-vim}"

alias epf="$PREFERED_EDITOR $HOME/.profile"
alias ecf="$PREFERED_EDITOR $uconf"
alias egc="$PREFERED_EDITOR $uconfg"
alias eal="$PREFERED_EDITOR $ualias"
alias ega="$PREFERED_EDITOR $ualiasg"
alias evc="$PREFERED_EDITOR $HOME/.SpaceVim.d/init.toml"
alias ezsh="$PREFERED_EDITOR $user_conf_path/.zsh_conf"
alias ebash="$PREFERED_EDITOR $user_conf_path/.bash_conf"

# Git
alias glg="git log --oneline --decorate --graph"
alias glga="git log --oneline --all --decorate --graph"
alias gcommit="git commit -m"
alias gcomm="git commit"
alias gfetch="git fetch"
alias gpull="git pull"
alias gupdate="git fetch && git pull"
alias gpush="git push"
alias gadd="git add"
alias greset="git reset"
alias gbranch="git branch"
alias grebase="git rebase"
alias gmerge="git merge"
alias gck="git checkout"
alias grm="git checkout -- ."
alias fgrm='rm -rf $(fgf)'
alias gstatus="git status"
alias gs="git status"
alias gsv="git status -v"
alias gamend="git commit --amend"
alias gdif="git diff"
alias gstash="git stash"
alias gsl="git stash list"
alias gsa="git stash apply"
alias gspop="git stash pop"
alias gsp="git stash push -m"
alias gss="git stash show"
alias gsd="git stash drop"
alias gprev="git diff HEAD^..HEAD"

gprevd () {
  local limit="$1"

  # Default limit: 1
  if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
    limit=1
  fi

  git diff HEAD~"$limit"..HEAD
}

gprevr () {
  local first="$1"
  local second="$2"

  # Default first: 1
  if [ -z "$first" ] || [ "$first" -le 0 ]; then
    first=1
  fi

  # Default second: 0
  if [ -z "$second" ] || [ "$second" -le 0 ]; then
    second=0
  fi

  git diff HEAD~"$first"..HEAD~"$second"
}

fadd () {
  local selection=($(fgf "${*:-}"))
  echo "$selection"
  if [ -n "$selection" ]; then
    git add "${selection[@]}"
  fi
}

fck () {
  local selection=$(fgb "${*:-}")
  if [ -n "$selection" ]; then
    git checkout "${selection//origin\//}"
  fi
}

fmerge () {
  local selection=$(fgb "${*:-}")
  echo "$selection"
  if [ -n "$selection" ]; then
    git merge "$selection"
  fi
}

fsa () {
  local selection=$(fgs "${*:-}")
  if [ -n "$selection" ]; then
    git stash apply "$selection"
  fi
}

# General commands
alias start="explorer.exe"
alias mkdr="mkdir -pv"
alias ll='ls -alhF '
alias la='ls -A '
alias l='ls -CF '
alias frm='\rm $(fd-defaults -tf -tx -tl | fzf-defaults --preview "bat --color=always {}")'
alias frdr="rm -rf \$(fd-defaults -td -d 1 | fzf-defaults --preview \"ls --color=always -aF {} | sed '1d;2d;3d'\")"
alias fzfp="fzf-defaults --preview 'bat --color=always --style=numbers --line-range=:500 {}'"
alias pvim="vim --clean"

rfv () {
  "$user_conf_path/utils/rgfzf.sh" "$@"
}

fll () {
  local selection=$(fd-defaults -td | fzf-defaults --preview "bat -pp --color=always <<< \$(realpath {}); ls -aF  --color=always {} | sed '1d;2d'")
  if [ -n "$selection" ]; then
    \ls -alhF  --color=always "$selection"
  fi
}

lff () {
  ls -la  |
    sed '1d;2d;3d' |
    fzf-defaults --preview 'if [ -f {9..} ]; then bat --color=always {9..}; else bat -pp --color=always <<< $(realpath {9..}; ls -aF  --color=always {9..} | sed "1d;2d"); fi' |
    awk '{ print $9 }'
}

lf () {
  ls -a  |
    sed '1d;2d' |
    fzf-defaults --preview 'if [ -f {} ]; then bat --color=always {}; else bat -pp --color=always <<< $(realpath {}; ls -aF  --color=always {} | sed "1d;2d"); fi'
}

lfd () {
  fd-defaults | fzf-defaults --preview 'if [ -f {} ]; then bat --color=always {}; else bat -pp --color=always <<< $(realpath {}; ls -aF  --color=always {} | sed "1d;2d"); fi'
}

# experimental
lfa () {
  local selection=$(cd "/" && fd-defaults |
    fzf-defaults --preview 'if [ -f {9..} ]; then bat --color=always {9..}; else bat -pp --color=always <<< $(realpath {9..}; ls -aF  --color=always {9..} | sed "1d;2d"); fi')
  echo "$selection"
}

fcd () {
  local location="${1:-$HOME}"
  local query="${@:2}"
  local pattern="."
  local selection=""

  if ! [ -d "$location" ]; then
    pattern="$location"
    location="$HOME"
  fi

  # old preview "ls --color=always -alhF {} | sed '1d;2d;3d'"
  selection=$(fd-defaults -tl -td "$pattern" "$location" |
    fzf-defaults --query "$query" \
      --header "(ctrl-/) Search in: $location" \
      --preview "realpath {}; ls --color=always -aF  {} | sed '1d;2d'")
  if [ -z "$selection" ]; then
    return 1
  fi

  cd $selection
}

fcdd () {
  local query="$@"
  local selection=""

  selection=$(fd-defaults -tl -td |
    fzf-defaults \
      --query "$query" \
      --preview "ls --color=always -aF  {} | sed '1d;2d'")
  if [ -n "$selection" ]; then
    cd $selection
  fi
}

fcda () {
  local selection=""

  selection=$(cd / && fd-defaults -tl -td | fzf-defaults --preview "ls --color=always -aF  {} | sed '1d;2d'")
  if [ -n "$selection" ]; then
    cd $selection
  fi
}

fed () {
  local location="${1:-$HOME}"
  local query="${@:3}"
  local pattern="."
  local editor="${PREFERED_EDITOR:-vim}"

  if ! [ -d "$location" ]; then
    pattern="$location"
    location="$HOME"
  fi

  local selection=$(fd-defaults -tf "$pattern" "$location" |
    fzf-defaults \
      --preview "bat --color=always {}" \
      --header "(ctrl-/) Search in: $location" \
      --query "$query")
  if [ -z "$selection" ]; then
    return
  fi
  if [ -n "$2" ] && [ "$2" != "-" ]; then
    editor="$2"
  fi
  $editor "$selection"
}

fedd () {
  local query="${@:2}"
  local editor="${PREFERED_EDITOR:-vim}"
  local selection=$(fd-defaults -tf | fzf-defaults --preview "bat --color=always {}" --query "$query")
  if [ -z "$selection" ]; then
    return
  fi
  if [ -n "$1" ] && [ "$1" != "-" ]; then
    editor="$1"
  fi
  $editor "$selection"
}

fnr () {
  if ! [ -f package.json ]; then
    echo "No package.json in dir $(pwd)"
    return 1
  fi

  local query="${*}"
  local selection="$(cat package.json |
    jq -r '.scripts | keys[]' |
    sort |
    fzf --query "$query" --height 50% --min-height 20 --border)"

  if [ -z "$selection" ]; then
    return 1
  fi

  npm run "$selection"
}

# Example quick_access
# export quick_access=(\
# "$HOME\n"\
# # "/mnt/c\n"\
# # "/mnt/c/Users/user\n"\
# "$prj\n"\
# "$user_conf_path\n"\
# "$user_scripts_path\n"\
# # "/tmp"\
# )

# Example quick_edit
# export quick_edit=(\
# "$user_conf_path/.uconfgrc\n"\
# "$user_conf_path/.uconfrc\n"\
# "$user_conf_path/.ualiasgrc\n"\
# "$user_conf_path/.ualiasrc\n"\
# "$HOME/.SpaceVim.d/init.toml\n"\
# "$HOME/.SpaceVim.d/autoload/config.vim"\
# )

# List folders for quick navigation
# Requires: quick_access=()
qnv () {
  if [ -z "$quick_access" ]; then
    return
  fi
  local selection=$(echo $quick_access | fzf-defaults --preview "ls --color=always -aF {} | sed '1d;2d'")
  if [ -n "$selection" ]; then
    cd $selection
  fi
}

# List files for quick edit
# Requires: quick_edit
qed () {
  if [ -z "$quick_edit" ]; then
    return
  fi
  local editor="$1"
  local selection=$(echo $quick_edit | fzf-defaults --preview "bat --color=always {}")
  if [ -z "$selection" ]; then
    return
  fi
  if [ -z "$editor" ]; then
    editor="${PREFERED_EDITOR:-vim}"
  fi
  $editor $selection
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Sys Alias
alias aptup="sudo apt-get update && sudo apt-get upgrade" 
alias aptupd="sudo apt-get update"
alias aptupg="sudo apt-get upgrade"
alias aptin="sudo apt-get install"
alias aptrm="sudo apt-get remove"

# Node & NPM
alias npm-list="npm list -g --dept=0"
alias nlg="npm list -g --dept=0"
alias nr="npm run"

# Navigation
alias ..="cd .."
alias ...="cd ../.."

# Nav up n directories
up () {
  local d=""
  local limit="$1"

  # Default to limit of 1
  if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
    limit=1
  fi

  for (( i=1; i<=limit; i++ )); do
    d="../$d"
  done

  # perdorm cd. Show error if cd fails
  if ! cd "$d"; then
    echo "Couldn't go up $limit dirs."
  fi
}

# Sourcing
alias spf="source $HOME/.profile"
alias scfg="source $HOME/.usr_conf/.uconfrc"
alias sgcf="source $HOME/.usr_conf/.uconfgrc"
alias sals="source $HOME/.usr_conf/.ualiasrc"
alias sgal="source $HOME/.usr_conf/.ualiasgrc"

alias psh="powershell.exe"
alias pwsh="pwsh.exe"
alias cps="pwsh.exe -nolo -nopro -nonin -c"
alias cmd="cmd.exe /c"

# Trim utilities
nospace () {
  tr -d "[:space:]"
}

ltrim () {
  sed -E 's/^[[:space:]]*//'
}

rtrim () {
  sed -E 's/[[:space:]]*$//'
}

trim () {
  ltrim | rtrim
}

# Open temp file on vim
ntemp () {
  "${PREFERED_EDITOR:-vim}" "/tmp/temp-$(uuidgen 2>/dev/null || date +%d-%m-%Y_%H-%M-%S).txt"
}

# extract files
ex () {
  if [ -f "$1" ]; then
    case $1 in
      *.tar.bz2)    tar xjvf $1;;
      *.tar.gz)     tar xzvf $1;;
      *.bz2)        bunzip2 $1;;
      *.rar)        unrar x $1;;
      *.gz)         gunzip $1;;
      *.tar)        tar xvf $1;;
      *.tbz2)       tar xjvf $1;;
      *.tgz)        tar xzvf $1;;
      *.zip)        unzip $1;;
      *.Z)          uncompress $1;;
      *.7z)         7z x $1;;
      *.deb)        ar x $1;;
      *.tar.xz)     tar xvf $1;;
      *.tar.zst)    unzstd $1;;
      *)            echo "'$1' cannot be extracted via ex()!";;
    esac
  else
    echo "'$1' is not a file"
  fi
}

# Clipboard wrappers
clipboard_paste=""
clipboard_copy=""
gallery_dl_commd="gallery-dl"
yt_dlp_commd="yt-dlp"
mpv_commd='mpv'

if [ "$IS_WSL" = true ]; then
  clipboard_paste="pbpaste.exe"
  clipboard_copy="pbcopy.exe"
  gallery_dl_commd="gallery-dl.exe"
  yt_dlp_commd="yt-dlp.exe"
  mpv_commd='mpv'

  if command -v mpv &> /dev/null; then 
    if [ "$IS_ZSH" = true ] && [[ $(type mpv) =~ function ]]; then
      unset -f mpv
    elif [ "$IS_BASH" = true ] && [[ $(type -t mpv) == function ]]; then
      unset -f mpv
    fi
  fi

  # MPV wrapper for WSL
  if ! command -v mpv &> /dev/null; then
    if command -v mpv.com &> /dev/null; then
      mpv_commd="mpv.com"
      mpv () {
        mpv.com "$@" 
      }

    elif command -v mpv.exe &> /dev/null; then
      mpv_commd="mpv.exe"
      mpv () {
        mpv.exe "$@" 
      }
    fi
  fi

  # yt-dlp wrapper for WSL
  if ! command -v yt-dlp &> /dev/null; then
    yt-dlp () {
      yt-dlp.exe "$@" 
    }
  fi

  # gallery-dl wrapper for WSL
  if ! command -v gallery-dl &> /dev/null; then
    gallery-dl () {
      gallery-dl.exe "$@" 
    }
  fi

  dwi () {
    local img_url="$("$clipboard_paste")"
    if [ -z "$img_url" ]; then
      echo "No image url"
      return 1
    fi
    "$gallery_dl_commd" "$img_url"
  }

  dwv () {
    local vid_url="$("$clipboard_paste")"
    if [ -z "$vid_url" ]; then
      echo "No video url"
      return 1
    fi
    "$yt_dlp_commd" "$vid_url"
  }

  # export play="yt-dlp.exe -o - $1 | mpv.com -"
  mpvw () {
    "$mpv_commd" "$@"
  }

  mpvp () {
    # mpv play
    # declare url=${*:-$(</dev/stdin)}
    local use_stdin=false
    for arg do
      shift
      if [[ "$arg" = "-" ]]; then
        # Remove -p arg and use value as pages_start
        use_stdin=true
        continue
      fi
      set -- "$@" "$arg"
    done

    if [ "$use_stdin" = true ]; then

      read -t 5 url
      if [ -z "$url" ]; then
        echo "No url provided"
        (exit 1) && true
      fi

      yt-dlp.exe -o - "$url" | "$mpv_commd" --cache "${@:2}"  -
    elif [ -n "$1" ]; then
      yt-dlp.exe -o - "$1" | "$mpv_commd" --cache "${@:2}"  -
    else
      echo "No url provided"
      (exit 1) && true
   fi
  }

  # Wrapper for ytfzf to launch on windows mpv player
  mpvl () {
    local selection=$(ytfzf -L "$@")
    if [ -n "$selection" ]; then
      mpv "$selection"
    fi
  }

  play () {
    local url="$("$clipboard_paste")"
    if [ -z "$url" ]; then
      echo "No url in clipboard"
      return 1
    fi

    if [[ "$url" =~ ".torrent" ]] ||
      [[ "$url" =~ "magnet:" ]] ||
      [[ "$url" =~ "webtorrent://" ]] ||
      [[ "$url" =~ "peerflix://" ]]; then
      cmd.exe /c webtorrent --mpv "$url"
    else
      mpvw "$url"
    fi
  }

  plpp () {
    local url="$("$clipboard_paste")"
    if [ -z "$url" ]; then
      echo "No url in clipboard"
      return 1
    fi
    mpvp "$url"
  }

  tplay () {
    local url="$("$clipboard_paste")"
    if [ -z "$url" ]; then
      echo "No url in clipboard"
      return 1
    fi
    cmd.exe /c webtorrent --mpv "$url"
  }

  yf () {
    # Set starting page with flag -p
    local startpage=1
    local linkOnly=false
    for arg do
      shift
      if [[ "$arg" =~ "-p[0-9]+" ]]; then
        # Remove -p arg and use value as pages_start
        startpage="${arg:2}"
        continue
      elif [[ $arg = "-L" ]]; then
        # -L is always called in this wrapper
        # Detect it here to prevent playback
        linkOnly=true
        continue
      fi
      set -- "$@" "$arg"
    done

    local selection="$(pages_start="$startpage" ytfzf -L "$@")"

    if [[ "$linkOnly" = true ]]; then
      echo "$selection"
      return
    fi

    if [ -n "$selection" ]; then
      mpvw "$selection"
    fi
  }

  linuxToWindowsPath () {
    echo "$(wslpath -aw "$1")"
  }

  windowsToLinuxPath () {
    echo "$(wslpath -au "$1")"
  }

  ocd () {
    local filepath="$("$clipboard_paste")"

    if [ -z "$filepath" ]; then
      return 1
    fi

    local linuxpath="" windowspath=""

    if [ -f "$filepath" ] || [ -d "$filepath" ]; then # Valid unix path
      linuxpath="$(wslpath -au "$(wslpath -aw $filepath)")"
    else # win path
      linuxpath="$(wslpath -au "$filepath")"
    fi

    if [ -d "$linuxpath" ]; then
      local windowspath="$(wslpath -aw "$linuxpath")"
    elif [ -f "$linuxpath" ]; then
      local windowspath="$(dirname "$linuxpath" | xargs -i wslpath -aw {})"
    else
      echo "Invalid path"
      return 1
    fi

    pwsh.exe -nolo -nonin -nopro -c Start-Process \""$windowspath"\"

  }

else
  mpvp () {
    declare url=${*:-$(</dev/stdin)}
    if [ -n "$url" ]; then
      yt-dlp -o - "$url" | mpv -
    else
      echo "No url provided"
      (exit 1) && true
    fi
  }

  yf () {
    # Set starting page with flag -p
    local startpage=1
    # Remove -p
    for arg do
      shift
      if [[ "$arg" =~ "-p[0-9]+" ]]; then
        startpage="${arg:2}"
        continue
      fi
      set -- "$@" "$arg"
    done

    pages_start="$startpage" ytfzf "$@"
  }

  # function for compliancy
  mpvl () {
    ytfzf "$@"
  }

  if [ $IS_TERMUX = true ]; then
    alias tcopy="termux-clipboard-set"
    alias tpaste="termux-clipboard-get"
    clipboard_copy="termux-clipboard-set"
    clipboard_paste="termux-clipboard-get"
    # termux mpv function wrapper
    mpv () {
      declare url=${*:-$(</dev/stdin)}
      if [ -n "$url" ]; then
        am start --user 0 -a android.intent.action.VIEW -d "$url" is.xyz.mpv/.MPVActivity
      else
        echo "No url provided"
        (exit 1) && true
      fi
    }

    play () {
      termux-clipboard-get | mpv
    }

  fi
fi

fmpv () {
  local initial="$@"
  local selection="$(fd -tf | fzf -m --height 50% --min-height 20 --border -q "$initial")"
  if [ -z "$selection" ]; then
    return
  fi
  local quoted=$(echo $selection | awk '{ printf "\"""%s""\""" ", $0 }')
  bash -c "$mpv_commd $quoted"
}

# If path issues, add VS Code path manually
# export PATH="${WIN_HOME}/AppData/Local/Programs/Microsoft VS Code/bin:$PATH"

# Dependencies
# export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"


