#!/usr/bin/env bash

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Expand variables e.g. $HOME
shopt -s direxpand

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# shopt -s globstar

# Use advance regex
# shopt -s extglob

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
  *);;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# History search with ctrl-p and ctrl-n
bind '"\C-p": history-search-backward'
bind '"\C-n": history-search-forward'


# ignore case for completions
bind 'set completion-ignore-case on'


__emoji__ () {
  local selected="$(emoji | tr -d '\n')"
  READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
  READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
}

bind -m emacs-standard -x '"\C-oi": __emoji__'
bind -m vi-command -x '"\C-oi": __emoji__'
bind -m vi-insert -x '"\C-oi": __emoji__'

__cprj__ () {
  mapfile -t dir < <(gprj | awk 'BEGIN {FS=" "} { printf "'\''%s'\''\n", $0}')
  if [ -d "${dir[*]}" ]; then
    printf 'builtin cd -- %q' "$dir"
  elif [ -n "$dir" ]; then
    printf '%s ' "${PREFERRED_EDITOR:-${EDITOR:-vim}} ${dir[*]}"
  else
    printf ''
  fi
}

# Alt+o to launch quick project cd
# bind '"\eo":"cprj\C-m"'

# Use bind -x to execute commands but it won't happen on the same
# context, so cd won't work
# bind -x '"\C-op":__prjc__'

# Ctrl-o p to run cprj command
bind -m emacs-standard '"\C-op": " \C-b\C-k \C-u`__cprj__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
bind -m vi-command '"\C-op": "\C-z\C-op\C-z"'
bind -m vi-insert '"\C-op": "\C-z\C-op\C-z"'


if [ "$IS_GITBASH" = true ]; then
  PROMPT_COMMAND='history -a'
elif [ "$IS_MAC" = true ]; then
  # Fix alt-c keybinding in macos
  bind -m emacs-standard '"ç": " \C-b\C-k \C-u`__fzf_cd__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
  bind -m vi-command '"ç": "\C-z\ec\C-z"'
  bind -m vi-insert '"ç": "\C-z\ec\C-z"'

  # Alt+o to launch quick project cd
  bind -m emacs-standard '"ø": " \C-b\C-k \C-u`__prjc__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
fi

# Add ctrl+o keybinding for lfcd
if command -v lf &> /dev/null; then
  bind '"\C-o\C-l":"lfcd\C-m"'
fi

# Edit current command in editor
# Ref: https://unix.stackexchange.com/questions/85391/where-is-the-bash-feature-to-open-a-command-in-editor-documented
__edit_command_no_execute () {
  local editor="${PREFERRED_EDITOR:-${EDITOR:-vim}}"
  local tmpf="$(mktemp)"
  mv "$tmpf" "$tmpf.bash"
  tmpf="$tmpf.bash"
  printf '%s\n' "$READLINE_LINE" >| "$tmpf"
  "$editor" "$tmpf"
  READLINE_LINE="$(cat "$tmpf")"
  READLINE_POINT="${#READLINE_LINE}"
  rm -f "$tmpf" &> /dev/null
}
bind -m emacs       -x '"\C-oe":__edit_command_no_execute'
bind -m vi          -x '"\C-oe":__edit_command_no_execute'
bind -m vi-insert   -x '"\C-oe":__edit_command_no_execute'

# Load fzf support
test -f ~/.fzf.bash && source ~/.fzf.bash

# Add local completions
if [ -d "$user_config_cache/completions/bash" ]; then
  for completion in "$user_config_cache/completions"/bash/*; do
    \. "$completion"
  done
fi

# Load completions from plugin
if [ -d "$user_config_cache/plugins/bash-completion" ]; then
  if ! type have &>/dev/null; then
    # Some completions rely on "have" function which is now deprecated
    # and it is unset by the end of /usr/share/bash-completion/bash_completion
    # Sourcing the bash_completion plugin may call a completion that needs "have"
    # so add it back if it is gone in the same way it is usually defined now.
    have () {
       unset -v have
       _have $1 && have=yes
     }
    export -f have
    have_added=true
  fi

  # Add completions for bash
  \. "$user_config_cache/plugins/bash-completion/bash_completion"

  # Remove "have" if it is still here and was added by us
  if type have &>/dev/null && [ "$have_added" = true ]; then
    unset -f have
    unset have
    unset have_added
  elif [ -n "$have_added" ]; then
    unset have_added
  fi
fi

# Add fzf tab completions
if [ -f "$user_config_cache/plugins/fzf-tab-completion/bash/fzf-bash-completion.sh" ]; then
  export FZF_COMPLETION_AUTO_COMMON_PREFIX=true
  export FZF_COMPLETION_AUTO_COMMON_PREFIX_PART=true

  \. "$user_config_cache/plugins/fzf-tab-completion/bash/fzf-bash-completion.sh"
  bind -x '"\t": fzf_bash_completion'
fi

if command -v carapace &>/dev/null && [ "$IS_GITBASH" = false ]; then
  # ~/.bashrc
  export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense' # optional
  source <(carapace _carapace)
fi

